@{
    ViewData["Title"] = "Affe";

}

<h2>Arm Force Field (AFF)</h2>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<style>

    canvas{
        height: 300px;

    }

    #graphMain {
        margin-top: 100px;
        margin-bottom: 10px;
        position: relative;
        white-space: nowrap;
    }

    .chartContainer {
        display: inline-block;
        border: 3px solid whitesmoke;
        width: 45%;
        padding: 10px;
        position:relative;
 
    }
    .chartContainer:last-child{
        xfloat: right;
    }
    #btnFitScale{
        margin: 20px;
    }
    #AFFInputs{
        background-color: #EEE;
        padding: 20px;
        margin-bottom: 20px;
    }
    #AFFInputs .caption{
        text-align: right;
        width: 300px;

    }
    .slider-container {
        text-align: center;
        font-family: Arial, sans-serif;
        margin: 20px;
    }
    .inputContainer {
        text-align: left;
        font-family: Arial, sans-serif;
        margin: 10px;
    }
    .inputContainer > *{
        display: inline-block;
    }
    .sliderContainer > .caption, .sliderValue{
        position: relative;
        top: -2px;
    }


    .sliderContainer > .sliderValue{
        text-align: left;
        width: 80px;
    }

    .slider{
        width: 300px;
    }
    #debugPanel{
        position: fixed;
        width:20vw;
        height:100vh;
        top:0px;
        right:0px;
        background-color:lavender;
        overflow-y: scroll;
    }
    .timeBar{
        position: absolute;
        left: calc(65px + 77%);
        top:25%;
        height: 55%;
        width: 2px;
        opacity:.5;
        background-color: blue;

    }
    #templatesContainer{
        display: none;
    }
</style>
<div id="debugPanel"></div>
<div id="messagePanel"></div>
<div id="graphMain">No valid manikin loaded</div>
<button onclick="fitScale()" id="btnFitScale">Fit scale</button>
<div class="slider-container">
    <label class="slider-label">
        Time: <span id="timeSliderValue" class="slider-value">0</span>
    </label>
    <input class="slider" type="range" id="timeSlider" min="0" max="0" value="0">
</div>

<div id="AFFInputs">
    <div class="selectContainer inputContainer">
        <div class="caption">Gender</div>
        <select id="genderSelect">
            <option>Female</option>
            <option>Male</option>
        </select>
    </div>
</div>

<div id="templatesContainer">
    <div class="sliderContainer inputContainer">
        <div class="caption">Slider template</div>
        <input class="slider" type="range" id="" min="1" max="99" value="75">
        <div class="sliderValue">88</div>
    </div>
</div>
<button id="downloadCsvBtn">Download CSV</button>


<script type="text/javascript">
    var charts = null;
    var chartMaxY = 0;
    var btnFitScale=document.getElementById('btnFitScale');
    var curData;

    function populateGraphs(graphData) {
        curData=graphData;
        var maxForce = 0;
        const vals = graphData.vals;
        for (var i = 0; i < 2; i++) {
            for (var j = 0; j < 2; j++) {
                maxForce = Math.max(maxForce, vals[j + i * graphData.labels.length].reduce((a, b) => Math.max(a, b), -Infinity));
            }
        }
        var maxY = Math.ceil(maxForce/50)*50;
        if (charts) {
            btnFitScale.disabled = maxY == chartMaxY;
            for (var i = 0; i < 2; i++) {
                for (var j = 0; j < graphData.labels.length; j++) {
                    charts[i].data.datasets[j].data = vals[j + i * graphData.labels.length];
                    charts[i].data.datasets[j].label = graphData.labels[j];
                }
                charts[i].update();
            }
            return;
        }
        chartMaxY = maxY;
        btnFitScale.disabled = true;
        charts = [];
        var mainContainer = document.getElementById("graphMain");
        mainContainer.innerHTML = "";
        var divLeft = mainContainer.appendChild(document.createElement("div"));
        mainContainer.appendChild(btnFitScale);
        var divRight = mainContainer.appendChild(document.createElement("div"));
        for (var i = 0; i < 2; i++) {
            var div = [divLeft, divRight][i];
            div.className="chartContainer";
            div.appendChild(document.createElement("h3")).textContent = ["Left Arm", "Right Arm"][i];
            var canvas = div.appendChild(document.createElement("canvas"));
            var timeBar=div.appendChild(document.createElement("div"));
            timeBar.className="timeBar";
            canvas.id = "chart" + i;
            var labelItr = 0;
            var datasets = [];
            for (var j = 0; j < graphData.labels.length; j++) {
                datasets.push({
                    label: graphData.labels[j],
                    data: vals[j + i * graphData.labels.length],
                    borderColor: ["red", "green", "orange"][j],
                    pointRadius: 0,
                    yAxisID: j==2 ? "percent" : "y"
                })
            }

            charts.push(new Chart(canvas.id, {
                type: "line",
                data: {
                    labels: graphData.timestamps,
                    datasets: datasets
                },
                options: {
                    scales: {
                        y: {
                            title: {
                                display: true,
                                text: "Force (N)",
                            },
                            beginAtZero: true,
                            max: maxY
                        },
                        percent: {
                            title: {
                                display: graphData.labels.length > 2,
                                text: "Percent",
                            },
                            position: "right",
                            ticks: {
                                color: graphData.labels.length > 2 ? "darkgray" : "white"
                            },
                            beginAtZero: true

                        },
                        x: {
                            ticks: {
                                callback: function (index) {
                                    value = graphData.timestamps[index];
                                    return (~~(value * 1000) % 100 === 0) ? value.toFixed(2) : '';
                                }
                            },
                            title: {
                                display: true,
                                text: "Time (s)",
                            }

                        }
                    }
                }
            }));
        }
        timeSlider.max = curData.timestamps.length-1;
    }
    function fitScale(){
        charts = null;
        refresh();
    }
    function refreshTime(){
        var idx = timeSlider.value;
        document.querySelectorAll('.timeBar').forEach(timeBar=>{
            timeBar.style.left="calc(65px + "+(77*idx/timeSlider.max)+"%)";
        });
        console.log(curData.affJsons[idx]);
        var aff = JSON.parse(curData.affJsons[idx]);

        document.getElementById("debugPanel").innerHTML = "<pre>"+JSON.stringify(aff,null,4)+"</pre>";
    }
    const timeSlider = document.getElementById('timeSlider');
    timeSlider.valLabel = document.getElementById('timeSliderValue');
    timeSlider.addEventListener('input', function () {
        this.valLabel.textContent = (~~(100 * curData.timestamps[this.value])/100) + " s"; //Avoid epsilon artifacts
        refreshTime();
    });

    const genderSelect = document.getElementById('genderSelect');
    genderSelect.onchange=function(){refresh();}
    function createNumberField(id, caption, val){
        var container=document.createElement();
    }
    function createSlider(parent, caption, val, minVal, maxVal, getValText, onInput){
        var template = document.getElementById("templatesContainer").querySelector(".sliderContainer");
        var elm = template.cloneNode(true);
        elm.querySelector(".caption").innerHTML=caption;
        var slider = elm.querySelector(".slider");
        slider.min=minVal;
        slider.max=maxVal;
        slider.value=val;
        var valText = elm.querySelector(".sliderValue");
        valText.innerHTML = getValText(slider.value);        
        slider.addEventListener('input', function () {
            valText.innerHTML = getValText(slider.value);
            onInput();
        });
        parent.appendChild(elm);
        return slider;
    }
    var AFFInputs=document.getElementById("AFFInputs");
    const percentSlider = createSlider(AFFInputs, "Percent capable", 75, 1, 100, (val)=>{
        return val+"%"; 
    },refresh);
    const freqEffortsPerDaySlider = createSlider(AFFInputs, "Frequency of Efforts per Day", 420, 1, 500, (val)=>{
        return val; 
    },refresh);
    const effDurPerEffort = createSlider(AFFInputs, "Effective Duration per Effort", 1, 1, 60, (val)=>{
        return val+" sec"; 
    },refresh);

    const loadSlider = createSlider(AFFInputs, "Load multiplier (demo)", 100, 10, 1000, (val)=>{
        return val+"%"; 
    },refresh);
    loadSlider.step=10;

    function refresh() {
        $.ajax({
            url: '@Url.Action("GetGraphValArrs", "AffTest")',
            method: 'GET',
            data: { 
                percentCapable: percentSlider.value,
                demoLoadPercent: loadSlider.value,
                altGender:genderSelect.value
            },
            success: function (response) {
                console.log(response);
                document.getElementById("messagePanel").innerHTML = response.messages.join("<br>");
                populateGraphs(response);
                refreshTime();
                
            },
            error: function () {
                //console.log("Failed to fetch message.");
                setTimeout(refresh, 1000);
            }
            
        });
    }

    document.getElementById("downloadCsvBtn").addEventListener("click", function () {
        if (!charts || charts.length < 2) {
            alert("No data available to download.");
            return;
        }

        let csvContent = "Time (s),"; // Start with time column

        // Retrieve dataset labels dynamically for both charts
        let leftLabels = charts[0].data.datasets.map(dataset => "Left " + dataset.label);
        let rightLabels = charts[1].data.datasets.map(dataset => "Right " + dataset.label);

        // Combine headers: Time column + Left Arm labels + Right Arm labels
        csvContent += [...leftLabels, ...rightLabels].join(",") + "\n";

        let timeLabels = charts[0].data.labels; // X-axis time values
        let leftDatasets = charts[0].data.datasets; // Left Arm datasets
        let rightDatasets = charts[1].data.datasets; // Right Arm datasets

        // Iterate over time points
        for (let i = 0; i < timeLabels.length; i++) {
            let time = timeLabels[i];
            let row = [time]; // Start with the time value

            // Extract each dataset value for Left Arm at this time index
            leftDatasets.forEach(dataset => {
                row.push(dataset.data[i]);
            });

            // Extract each dataset value for Right Arm at this time index
            rightDatasets.forEach(dataset => {
                row.push(dataset.data[i]);
            });

            csvContent += row.join(",") + "\n";
        }

        // Create a Blob with the CSV data
        let blob = new Blob([csvContent], { type: 'text/csv' });
        let link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = "force_data.csv";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    });


    refresh();


</script>
